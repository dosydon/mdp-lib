src/lexi/domains/MORacetrackState.cpp:    std::vector<double> weights(problem->size(), 0.0);
src/lexi/domains/airplane/AirplaneState.cpp:        if (problem->heuristics().size() > i && problem->heuristics()[i] != nullptr)
src/lexi/domains/airplane/AirplaneState.cpp:            mobjCost_[i] = problem->heuristics()[i]->cost(this);
src/solvers/solver.cpp:    for (mlcore::Successor su : problem->transition(s, a)) {
src/solvers/solver.cpp:    qAction = (qAction * problem->gamma()) + problem->cost(s, a);
src/solvers/solver.cpp:    for (mlcore::Successor su : problem->transition(s, a, 0)) {
src/solvers/solver.cpp:    qAction = (qAction * problem->gamma()) + problem->cost(s, a, i);
src/solvers/solver.cpp:    for (mlcore::Successor su : problem->transition(s, a)) {
src/solvers/solver.cpp:    g = (g * problem->gamma()) + problem->cost(s, a);
src/solvers/solver.cpp:    h *= problem->gamma();
src/solvers/solver.cpp:    double bestQ = problem->goal(s) ? 0.0 : mdplib::dead_end_cost;
src/solvers/solver.cpp:    for (mlcore::Action* a : problem->actions()) {
src/solvers/solver.cpp:        if (!problem->applicable(s, a))
src/solvers/solver.cpp:    if (problem->goal(s, 0)) {
src/solvers/solver.cpp:        for (int i = 0; i < problem->size(); i++)
src/solvers/solver.cpp:    std::list<mlcore::Action*> filteredActions = problem->actions();
src/solvers/solver.cpp:            if (!problem->applicable(s, a))
src/solvers/solver.cpp:                if (!problem->applicable(s, a))
src/solvers/solver.cpp:                if (qActions[actionIdx] <= (bestQ + problem->slack() + 1.0e-8))
src/solvers/solver.cpp:    for (int i = 0; i < problem->size(); i++)
src/solvers/solver.cpp:    double bestQ = problem->goal(s) ? 0.0 : mdplib::dead_end_cost;
src/solvers/solver.cpp:    for (mlcore::Action* a : problem->actions()) {
src/solvers/solver.cpp:        if (!problem->applicable(s, a))
src/solvers/solver.cpp:    for (mlcore::Successor sccr : problem->transition(s, a)) {
src/solvers/solver.cpp:    for (mlcore::Action* a : problem->actions()) {
src/solvers/solver.cpp:        if (!problem->applicable(s, a))
src/solvers/solver.cpp:    for (mlcore::Successor sccr : problem->transition(s, a)) {
