#ifndef MDPLIB_PROBLEM_H
#define MDPLIB_PROBLEM_H

#include <list>
#include "state.h"
#include "action.h"
#include "util/rational.h"

/**
 * An abstract class for Stochastic Shortest Path Problem objects.
 */
class Problem
{
protected:
    /**
     * The initial state for the problem.
     */
    State* s0;

    /**
     * A list of all the possible actions in this problem.
     */
    std::list<Action *> actions;

    /**
     * An internal structure to store all states that are generated by calls to the
     * transition function.
     */
    StateSet states;

    /**
     * Returns the copy of the given state if it exists, or adds it to the state set
     * and returns it otherwise.
     */
    State *getState(State *s)
    {
        bool check = states.insert(s).second;
        State *ret = *states.find(s);
        if (!check)
            delete s;   // state was already in the set, so get rid of the state used to find it
        return ret;
    }

public:
    /**
     * Returns true if state s is a goal.
     */
    virtual bool goal(State *s) const =0;

    /**
     * Returns a list of all succcessors when action a is applied in state s.
     */
    virtual std::list<Successor> transition(State *s, Action *a) =0;

    /**
     * Returns the cost of applying action a in state s.
     */
    virtual Rational cost(State *s, Action *a) const =0;

    /**
     * Returns true if action a can be applied in state s.
     */
    virtual bool applicable(State *s, Action *a) const =0;

    /**
    * Generates all states that can be reached from s0 and stores internally.
    */
    virtual void generateAll() { }

    /**
     * Returns the set containing all states generated so far.
     */
    StateSet& getStates()
    {
        return states;
    }
};

#endif // MDPLIB_PROBLEM_H
